package com.bobocode.dao;

import com.bobocode.model.Product;
import com.bobocode.util.ExerciseNotCompletedException;
import java.util.List;
import javax.sql.DataSource;

public class ProductDaoImpl implements ProductDao {

    private final DataSource dataSource;

    public ProductDaoImpl(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Override
    public void save(Product product) {
        throw new ExerciseNotCompletedException();// todo
    }

    private void saveProduct(Product product, Connection connection) throws SQLException {
        PreparedStatement insertStatement = prepareInsertStatement(product, connection);
        insertStatement.executeUpdate();
        Long id = fetchGeneratedId(insertStatement);
        product.setId(id);
    }

    private PreparedStatement prepareInsertStatement(Product product, Connection connection) {
        try {
            PreparedStatement insertStatement = connection.prepareStatement(INSERT_SQL,
                    PreparedStatement.RETURN_GENERATED_KEYS); // this parameter will configure query to ask db for a generated keys
            fillProductStatement(product, insertStatement);
            return insertStatement;
        } catch (SQLException e) {
            throw new DaoOperationException(String.format("Cannot prepare statement for product: %s", product), e);
        }
    }

    private void fillProductStatement(Product product, PreparedStatement updateStatement) throws SQLException {
        updateStatement.setString(1, product.getName());
        updateStatement.setString(2, product.getProducer());
        updateStatement.setBigDecimal(3, product.getPrice());
        updateStatement.setDate(4, Date.valueOf(product.getExpirationDate()));
    }

    private Long fetchGeneratedId(PreparedStatement insertStatement) throws SQLException {
        // this method allows to retrieve IDs that were generated by the database during insert statement
        ResultSet generatedKeys = insertStatement.getGeneratedKeys();
        if (generatedKeys.next()) { // you need to call next() because cursor is located before the first row
            return generatedKeys.getLong(1);
        } else { // if next() returned false it means that database didn't return any IDs
            throw new DaoOperationException("Can not obtain product ID");
        }
    }


    /**
     * Retrieves and returns all products from the database
     *
     * @return list of all products
     * @throws DaoOperationException in case of database errors
     */

    @Override
    public List<Product> findAll() {
        throw new ExerciseNotCompletedException();// todo
    }

    private List<Product> findAllProducts(Connection connection) throws SQLException {
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(SELECT_ALL_SQL);
        return collectToList(resultSet);

    }

    private List<Product> collectToList(ResultSet resultSet) throws SQLException {
        List<Product> products = new ArrayList<>();
        while (resultSet.next()) {
            products.add(parseRow(resultSet));
        }
        return products;
    }

    private Product parseRow(ResultSet resultSet) throws SQLException {
        Product product = new Product();
        product.setId(resultSet.getLong("id"));
        product.setName(resultSet.getString("name"));
        product.setProducer(resultSet.getString("producer"));
        product.setPrice(resultSet.getBigDecimal("price"));
        product.setExpirationDate(resultSet.getDate("expiration_date").toLocalDate());
        return product;
    }




    @Override
    public Product findOne(Long id) {
        throw new ExerciseNotCompletedException();// todo
    }

    @Override
    public void update(Product product) {
        throw new ExerciseNotCompletedException();// todo
    }

    @Override
    public void remove(Product product) {
        throw new ExerciseNotCompletedException();// todo
    }

}
